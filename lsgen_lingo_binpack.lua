#!/usr/bin/env lslua

-- Load Penlight's lapp module for command-line parsing
local lapp = require 'pl.lapp'
local math = require 'math'
local unpack = table.unpack or unpack  -- Lua 5.1 compatibility

-- Command-line argument specification
local args = lapp [[
Generate a bin packing instance for LINGO with random weights and tight capacity.
  -n,--items    (default 10)    Number of items (positive integer)
  -r,--fraction (default 0.05)   Tightness fraction for capacity (between 0 and 1)
  -o,--output   (default "bin_packing.lng")  Output file name
  -g,--seed     (default 0)     Random seed (0 for current time)
]]


-- Validate inputs
assert(args.items > 0, "Number of items must be positive")
assert(args.fraction > 0 and args.fraction < 1, "Fraction must be between 0 and 1")

-- Set random seed if provided
if args.seed then
    math.randomseed(args.seed)
else
    math.randomseed(os.time())
end

-- Function to generate bin packing instance
local function generate_instance(n, r)
    print("Generating bin packing instance with " .. n .. " items and fraction " .. r)
    -- Generate random weights for n items (e.g., between 1 and 100)
    local w = {}
    local total_weight = 0
    for i = 1, n do
        w[i] = math.random(1, 100)  -- Random integer weights between 1 and 100
        total_weight = total_weight + w[i]
    end

    -- Compute tight capacity: r * total_weight
    local c = math.floor(total_weight * r)

    -- Ensure capacity is at least larger than the largest item
    local max_weight = math.max(unpack(w))
    if c < max_weight then
        c = math.floor(max_weight*1.2)  -- Adjust to make problem feasible (e.g., 20% larger)
    end

    return w, c, total_weight
end

-- Generate the instance
local weights, capacity, total_weight = generate_instance(args.items, args.fraction)

-- Write the LINGO model to a file
local file = io.open(args.output, "w")
file:write("MODEL:\n")
file:write("! Bin Packing Problem Generated by Lua;\n\n")

-- Define sets
file:write("SETS:\n")
file:write("    ITEMS /1.." .. args.items .. "/: W;\n")
file:write("    BINS /1.." .. args.items .. "/: Y;\n")
file:write("    ITEM_BIN(ITEMS, BINS): X;\n")
file:write("ENDSETS\n\n")

-- Data section
file:write("DATA:\n")
file:write("    W = ")
for i = 1, #weights, 20 do
    file:write(table.concat(weights, " ", i, math.min(i + 19, #weights)) .. (i + 19 < #weights and "\n        " or ";\n"))
end
file:write("    C = " .. capacity .. ";\n")
file:write("    N = " .. args.items .. ";\n")
file:write("ENDDATA\n\n")

-- Objective
file:write("! Objective: Minimize number of bins used;\n")
file:write("MIN = @SUM(BINS(J): Y(J));\n\n")

-- Constraints
file:write("! Constraints;\n")
file:write("! 1. Each item assigned to exactly one bin;\n")
file:write("@FOR(ITEMS(I):\n")
file:write("    @SUM(BINS(J): X(I,J)) = 1;\n")
file:write(");\n\n")

file:write("! 2. Bin capacity constraint;\n")
file:write("@FOR(BINS(J):\n")
file:write("    @SUM(ITEMS(I): W(I) * X(I,J)) <= C * Y(J);\n")
file:write(");\n\n")

file:write("! 3. Binary variables;\n")
file:write("@FOR(BINS(J): @BIN(Y(J)));\n")
file:write("@FOR(ITEM_BIN(I,J): @BIN(X(I,J)));\n")

file:write("END\n")
file:close()

-- Console output for confirmation
print("Generated LINGO file: " .. args.output)
print("Number of items: " .. args.items)
print("Item weights: " .. table.concat(weights, " "))
print("Total weight: " .. total_weight)
print("Bin capacity: " .. capacity .. " (fraction r = " .. args.fraction .. ")")
print("Writing data to " .. args.output..".dat" .. " to plug into 'samples/c/ex_dw.c'")
local f = io.open(args.output..".dat", "w")
f:write("#define nObjects "..args.items.."\n")
f:write("#define dCapacity "..capacity.."\n")
f:write("double  dWeights[nObjects] = {\n")
for i = 1, #weights do
    f:write(weights[i])
    if i < #weights then
        f:write(", ")
    end
    if i % 20 == 0 then
        f:write("\n")
    end
end
f:write("};\n")
f:close()
