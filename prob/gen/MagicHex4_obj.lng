MODEL:
SETS:
	cell /1..37/:
		valasg;
	valset /1..37/;
	cxv(cell,valset): z;
ENDSETS
! Variables: z(i,j) = 1 if cell i is assigned value j;
! Each value is assigned once;
@FOR(valset(j): @SUM(cell(i): z(i,j)) = 1;);
! Each cell gets a value;
@FOR(cell(i): @SUM(valset(j): z(i,j)) = 1; valasg(i) = @SUM(valset(j): (KOFF+j)*z(i,j)););
! Binary constraints;
@FOR(cxv(i,j): @BIN(z(i,j)));
! Optional symmetry-breaking driver;
min= @sum( valset(j): j*z(KIDX,j));
! There is lots of symmetry. Choose one of the solutions;
! There are 6xN rotations and 3 reflections;
! To eliminate rotations, take cell(i), enumerate all positions in each rotation and add a constraint to use only one;
CALC:
	KIDX = 6;
	KSUM = 100; !Comment out to make KSUM the variable to use in place off 'magic_sum(N);
	KOFF = 0; !Comment out to make KOFF the variable to offset for the values assigned in the hexagon, 
                       Positive KOFF shifts values assigned from 1..(3N^2-3N+1) to (1+KOFF)..(3N^2-3N+1+KOFF)
                       If it is a variable (i.e. commented out from CALC), it should better be @free;
	!@SET('XSOLVR',14,0); !Remove comment to use external solver '14';
	@SET('SOLVLG', 2);
	!@SET('GLOBAL', 1); !Remove comment to activate global solver if KOFF is a variable;
ENDCALC
[HRZ1] @SUM(valset(j): (j+KOFF)*z(1,j)) + @SUM(valset(j): (j+KOFF)*z(2,j)) + @SUM(valset(j): (j+KOFF)*z(3,j)) + @SUM(valset(j): (j+KOFF)*z(4,j)) = KSUM;
[HRZ2] @SUM(valset(j): (j+KOFF)*z(5,j)) + @SUM(valset(j): (j+KOFF)*z(6,j)) + @SUM(valset(j): (j+KOFF)*z(7,j)) + @SUM(valset(j): (j+KOFF)*z(8,j)) + @SUM(valset(j): (j+KOFF)*z(9,j)) = KSUM;
[HRZ3] @SUM(valset(j): (j+KOFF)*z(10,j)) + @SUM(valset(j): (j+KOFF)*z(11,j)) + @SUM(valset(j): (j+KOFF)*z(12,j)) + @SUM(valset(j): (j+KOFF)*z(13,j)) + @SUM(valset(j): (j+KOFF)*z(14,j)) + @SUM(valset(j): (j+KOFF)*z(15,j)) = KSUM;
[HRZ4] @SUM(valset(j): (j+KOFF)*z(16,j)) + @SUM(valset(j): (j+KOFF)*z(17,j)) + @SUM(valset(j): (j+KOFF)*z(18,j)) + @SUM(valset(j): (j+KOFF)*z(19,j)) + @SUM(valset(j): (j+KOFF)*z(20,j)) + @SUM(valset(j): (j+KOFF)*z(21,j)) + @SUM(valset(j): (j+KOFF)*z(22,j)) = KSUM;
[HRZ5] @SUM(valset(j): (j+KOFF)*z(23,j)) + @SUM(valset(j): (j+KOFF)*z(24,j)) + @SUM(valset(j): (j+KOFF)*z(25,j)) + @SUM(valset(j): (j+KOFF)*z(26,j)) + @SUM(valset(j): (j+KOFF)*z(27,j)) + @SUM(valset(j): (j+KOFF)*z(28,j)) = KSUM;
[HRZ6] @SUM(valset(j): (j+KOFF)*z(29,j)) + @SUM(valset(j): (j+KOFF)*z(30,j)) + @SUM(valset(j): (j+KOFF)*z(31,j)) + @SUM(valset(j): (j+KOFF)*z(32,j)) + @SUM(valset(j): (j+KOFF)*z(33,j)) = KSUM;
[HRZ7] @SUM(valset(j): (j+KOFF)*z(34,j)) + @SUM(valset(j): (j+KOFF)*z(35,j)) + @SUM(valset(j): (j+KOFF)*z(36,j)) + @SUM(valset(j): (j+KOFF)*z(37,j)) = KSUM;
[LLR1] @SUM(valset(j): (j+KOFF)*z(16,j)) + @SUM(valset(j): (j+KOFF)*z(23,j)) + @SUM(valset(j): (j+KOFF)*z(29,j)) + @SUM(valset(j): (j+KOFF)*z(34,j)) = KSUM;
[LLR2] @SUM(valset(j): (j+KOFF)*z(10,j)) + @SUM(valset(j): (j+KOFF)*z(17,j)) + @SUM(valset(j): (j+KOFF)*z(24,j)) + @SUM(valset(j): (j+KOFF)*z(30,j)) + @SUM(valset(j): (j+KOFF)*z(35,j)) = KSUM;
[LLR3] @SUM(valset(j): (j+KOFF)*z(5,j)) + @SUM(valset(j): (j+KOFF)*z(11,j)) + @SUM(valset(j): (j+KOFF)*z(18,j)) + @SUM(valset(j): (j+KOFF)*z(25,j)) + @SUM(valset(j): (j+KOFF)*z(31,j)) + @SUM(valset(j): (j+KOFF)*z(36,j)) = KSUM;
[LLR4] @SUM(valset(j): (j+KOFF)*z(1,j)) + @SUM(valset(j): (j+KOFF)*z(6,j)) + @SUM(valset(j): (j+KOFF)*z(12,j)) + @SUM(valset(j): (j+KOFF)*z(19,j)) + @SUM(valset(j): (j+KOFF)*z(26,j)) + @SUM(valset(j): (j+KOFF)*z(32,j)) + @SUM(valset(j): (j+KOFF)*z(37,j)) = KSUM;
[LLR5] @SUM(valset(j): (j+KOFF)*z(2,j)) + @SUM(valset(j): (j+KOFF)*z(7,j)) + @SUM(valset(j): (j+KOFF)*z(13,j)) + @SUM(valset(j): (j+KOFF)*z(20,j)) + @SUM(valset(j): (j+KOFF)*z(27,j)) + @SUM(valset(j): (j+KOFF)*z(33,j)) = KSUM;
[LLR6] @SUM(valset(j): (j+KOFF)*z(3,j)) + @SUM(valset(j): (j+KOFF)*z(8,j)) + @SUM(valset(j): (j+KOFF)*z(14,j)) + @SUM(valset(j): (j+KOFF)*z(21,j)) + @SUM(valset(j): (j+KOFF)*z(28,j)) = KSUM;
[LLR7] @SUM(valset(j): (j+KOFF)*z(4,j)) + @SUM(valset(j): (j+KOFF)*z(9,j)) + @SUM(valset(j): (j+KOFF)*z(15,j)) + @SUM(valset(j): (j+KOFF)*z(22,j)) = KSUM;
[ULR1] @SUM(valset(j): (j+KOFF)*z(1,j)) + @SUM(valset(j): (j+KOFF)*z(5,j)) + @SUM(valset(j): (j+KOFF)*z(10,j)) + @SUM(valset(j): (j+KOFF)*z(16,j)) = KSUM;
[ULR2] @SUM(valset(j): (j+KOFF)*z(2,j)) + @SUM(valset(j): (j+KOFF)*z(6,j)) + @SUM(valset(j): (j+KOFF)*z(11,j)) + @SUM(valset(j): (j+KOFF)*z(17,j)) + @SUM(valset(j): (j+KOFF)*z(23,j)) = KSUM;
[ULR3] @SUM(valset(j): (j+KOFF)*z(3,j)) + @SUM(valset(j): (j+KOFF)*z(7,j)) + @SUM(valset(j): (j+KOFF)*z(12,j)) + @SUM(valset(j): (j+KOFF)*z(18,j)) + @SUM(valset(j): (j+KOFF)*z(24,j)) + @SUM(valset(j): (j+KOFF)*z(29,j)) = KSUM;
[ULR4] @SUM(valset(j): (j+KOFF)*z(4,j)) + @SUM(valset(j): (j+KOFF)*z(8,j)) + @SUM(valset(j): (j+KOFF)*z(13,j)) + @SUM(valset(j): (j+KOFF)*z(19,j)) + @SUM(valset(j): (j+KOFF)*z(25,j)) + @SUM(valset(j): (j+KOFF)*z(30,j)) + @SUM(valset(j): (j+KOFF)*z(34,j)) = KSUM;
[ULR5] @SUM(valset(j): (j+KOFF)*z(9,j)) + @SUM(valset(j): (j+KOFF)*z(14,j)) + @SUM(valset(j): (j+KOFF)*z(20,j)) + @SUM(valset(j): (j+KOFF)*z(26,j)) + @SUM(valset(j): (j+KOFF)*z(31,j)) + @SUM(valset(j): (j+KOFF)*z(35,j)) = KSUM;
[ULR6] @SUM(valset(j): (j+KOFF)*z(15,j)) + @SUM(valset(j): (j+KOFF)*z(21,j)) + @SUM(valset(j): (j+KOFF)*z(27,j)) + @SUM(valset(j): (j+KOFF)*z(32,j)) + @SUM(valset(j): (j+KOFF)*z(36,j)) = KSUM;
[ULR7] @SUM(valset(j): (j+KOFF)*z(22,j)) + @SUM(valset(j): (j+KOFF)*z(28,j)) + @SUM(valset(j): (j+KOFF)*z(33,j)) + @SUM(valset(j): (j+KOFF)*z(37,j)) = KSUM;
END
!Hex grid:
! Honeycomb structure for order N=4;
!         1   2   3   4 
!       5   6   7   8   9 
!    10  11  12  13  14  15 
!  16  17  18  19  20  21  22 
!    23  24  25  26  27  28 
!      29  30  31  32  33 
!        34  35  36  37 
!;
! ||||||||||||||||||||;
!Rotated original hex grid 60 degrees:
! Honeycomb structure for order N=4;
!        16  10   5   1 
!      23  17  11   6   2 
!    29  24  18  12   7   3 
!  34  30  25  19  13   8   4 
!    35  31  26  20  14   9 
!      36  32  27  21  15 
!        37  33  28  22 
!;
! ////////////////////;
!Rotated original hex grid 120 degrees:
! Honeycomb structure for order N=4;
!        34  29  23  16 
!      35  30  24  17  10 
!    36  31  25  18  11   5 
!  37  32  26  19  12   6   1 
!    33  27  20  13   7   2 
!      28  21  14   8   3 
!        22  15   9   4 
!;
! --------------------;
!Rotated original hex grid 180 degrees:
! Honeycomb structure for order N=4;
!        37  36  35  34 
!      33  32  31  30  29 
!    28  27  26  25  24  23 
!  22  21  20  19  18  17  16 
!    15  14  13  12  11  10 
!       9   8   7   6   5 
!         4   3   2   1 
!;
! \\\\\\\\\\\\\\\\\\\\;
!Rotated original hex grid 240 degrees:
! Honeycomb structure for order N=4;
!        22  28  33  37 
!      15  21  27  32  36 
!     9  14  20  26  31  35 
!   4   8  13  19  25  30  34 
!     3   7  12  18  24  29 
!       2   6  11  17  23 
!         1   5  10  16 
!;
! ||||||||||||||||||||;
!Rotated original hex grid 300 degrees:
! Honeycomb structure for order N=4;
!         4   9  15  22 
!       3   8  14  21  28 
!     2   7  13  20  27  33 
!   1   6  12  19  26  32  37 
!     5  11  18  25  31  36 
!      10  17  24  30  35 
!        16  23  29  34 
!;
! --------------------;
!Rotated original hex grid 360 degrees:
! Honeycomb structure for order N=4;
!         1   2   3   4 
!       5   6   7   8   9 
!    10  11  12  13  14  15 
!  16  17  18  19  20  21  22 
!    23  24  25  26  27  28 
!      29  30  31  32  33 
!        34  35  36  37 
!;
!Flipped across horizontal axis:
! Honeycomb structure for order N=4;
!        34  35  36  37 
!      29  30  31  32  33 
!    23  24  25  26  27  28 
!  16  17  18  19  20  21  22 
!    10  11  12  13  14  15 
!       5   6   7   8   9 
!         1   2   3   4 
!;
!Flipped across LLR diagonal:
! Honeycomb structure for order N=4;
!        37  33  28  22 
!      36  32  27  21  15 
!    35  31  26  20  14   9 
!  34  30  25  19  13   8   4 
!    29  24  18  12   7   3 
!      23  17  11   6   2 
!        16  10   5   1 
!;
!Flipped accros ULR diagonal:
! Honeycomb structure for order N=4;
!        22  15   9   4 
!      28  21  14   8   3 
!    33  27  20  13   7   2 
!  37  32  26  19  12   6   1 
!    36  31  25  18  11   5 
!      35  30  24  17  10 
!        34  29  23  16 
!;
!Symmetry breaking constraints:
! - Break N deg rotational symmetry, N=60, 120, 180, 240, 300
! - Break horizontal symmetry
! - Break LLR diagonal symmetry
! - Break ULR diagonal symmetry
;
!	@FOR(cell(i):
!		@FOR(cell(j) | i,j share the same position in any symmetric hexagon:
!			valasg(i) <> valasg(j) for all symmetry groups..
!		);
