MODEL:
SETS:
	cell /1..91/:
		valasg;
	valset /1..91/;
	cxv(cell,valset): z;
ENDSETS
! Variables: z(i,j) = 1 if cell i is assigned value j;
! Each value is assigned once;
@FOR(valset(j): @SUM(cell(i): z(i,j)) = 1;);
! Each cell gets a value;
@FOR(cell(i): @SUM(valset(j): z(i,j)) = 1; valasg(i) = @SUM(valset(j): (KOFF+j)*z(i,j)););
! Binary constraints;
@FOR(cxv(i,j): @BIN(z(i,j)));
! Optional symmetry-breaking driver;
min= @sum( valset(j): j*z(KIDX,j));
! There is lots of symmetry. Choose one of the solutions;
! There are 6xN rotations and 3 reflections;
! To eliminate rotations, take cell(i), enumerate all positions in each rotation and add a constraint to use only one;
CALC:
	KIDX = 6;
	KSUM = 380; !Comment out to make KSUM the variable to use in place off 'magic_sum(N);
	KOFF = 0; !Comment out to make KOFF the variable to offset for the values assigned in the hexagon, 
                       Positive KOFF shifts values assigned from 1..(3N^2-3N+1) to (1+KOFF)..(3N^2-3N+1+KOFF)
                       If it is a variable (i.e. commented out from CALC), it should better be @free;
	!@SET('XSOLVR',14,0); !Remove comment to use external solver '14';
	@SET('SOLVLG', 2);
	!@SET('GLOBAL', 1); !Remove comment to activate global solver if KOFF is a variable;
ENDCALC
[HRZ1] @SUM(valset(j): (j+KOFF)*z(1,j)) + @SUM(valset(j): (j+KOFF)*z(2,j)) + @SUM(valset(j): (j+KOFF)*z(3,j)) + @SUM(valset(j): (j+KOFF)*z(4,j)) + @SUM(valset(j): (j+KOFF)*z(5,j)) + @SUM(valset(j): (j+KOFF)*z(6,j)) = KSUM;
[HRZ2] @SUM(valset(j): (j+KOFF)*z(7,j)) + @SUM(valset(j): (j+KOFF)*z(8,j)) + @SUM(valset(j): (j+KOFF)*z(9,j)) + @SUM(valset(j): (j+KOFF)*z(10,j)) + @SUM(valset(j): (j+KOFF)*z(11,j)) + @SUM(valset(j): (j+KOFF)*z(12,j)) + @SUM(valset(j): (j+KOFF)*z(13,j)) = KSUM;
[HRZ3] @SUM(valset(j): (j+KOFF)*z(14,j)) + @SUM(valset(j): (j+KOFF)*z(15,j)) + @SUM(valset(j): (j+KOFF)*z(16,j)) + @SUM(valset(j): (j+KOFF)*z(17,j)) + @SUM(valset(j): (j+KOFF)*z(18,j)) + @SUM(valset(j): (j+KOFF)*z(19,j)) + @SUM(valset(j): (j+KOFF)*z(20,j)) + @SUM(valset(j): (j+KOFF)*z(21,j)) = KSUM;
[HRZ4] @SUM(valset(j): (j+KOFF)*z(22,j)) + @SUM(valset(j): (j+KOFF)*z(23,j)) + @SUM(valset(j): (j+KOFF)*z(24,j)) + @SUM(valset(j): (j+KOFF)*z(25,j)) + @SUM(valset(j): (j+KOFF)*z(26,j)) + @SUM(valset(j): (j+KOFF)*z(27,j)) + @SUM(valset(j): (j+KOFF)*z(28,j)) + @SUM(valset(j): (j+KOFF)*z(29,j)) + @SUM(valset(j): (j+KOFF)*z(30,j)) = KSUM;
[HRZ5] @SUM(valset(j): (j+KOFF)*z(31,j)) + @SUM(valset(j): (j+KOFF)*z(32,j)) + @SUM(valset(j): (j+KOFF)*z(33,j)) + @SUM(valset(j): (j+KOFF)*z(34,j)) + @SUM(valset(j): (j+KOFF)*z(35,j)) + @SUM(valset(j): (j+KOFF)*z(36,j)) + @SUM(valset(j): (j+KOFF)*z(37,j)) + @SUM(valset(j): (j+KOFF)*z(38,j)) + @SUM(valset(j): (j+KOFF)*z(39,j)) + @SUM(valset(j): (j+KOFF)*z(40,j)) = KSUM;
[HRZ6] @SUM(valset(j): (j+KOFF)*z(41,j)) + @SUM(valset(j): (j+KOFF)*z(42,j)) + @SUM(valset(j): (j+KOFF)*z(43,j)) + @SUM(valset(j): (j+KOFF)*z(44,j)) + @SUM(valset(j): (j+KOFF)*z(45,j)) + @SUM(valset(j): (j+KOFF)*z(46,j)) + @SUM(valset(j): (j+KOFF)*z(47,j)) + @SUM(valset(j): (j+KOFF)*z(48,j)) + @SUM(valset(j): (j+KOFF)*z(49,j)) + @SUM(valset(j): (j+KOFF)*z(50,j)) + @SUM(valset(j): (j+KOFF)*z(51,j)) = KSUM;
[HRZ7] @SUM(valset(j): (j+KOFF)*z(52,j)) + @SUM(valset(j): (j+KOFF)*z(53,j)) + @SUM(valset(j): (j+KOFF)*z(54,j)) + @SUM(valset(j): (j+KOFF)*z(55,j)) + @SUM(valset(j): (j+KOFF)*z(56,j)) + @SUM(valset(j): (j+KOFF)*z(57,j)) + @SUM(valset(j): (j+KOFF)*z(58,j)) + @SUM(valset(j): (j+KOFF)*z(59,j)) + @SUM(valset(j): (j+KOFF)*z(60,j)) + @SUM(valset(j): (j+KOFF)*z(61,j)) = KSUM;
[HRZ8] @SUM(valset(j): (j+KOFF)*z(62,j)) + @SUM(valset(j): (j+KOFF)*z(63,j)) + @SUM(valset(j): (j+KOFF)*z(64,j)) + @SUM(valset(j): (j+KOFF)*z(65,j)) + @SUM(valset(j): (j+KOFF)*z(66,j)) + @SUM(valset(j): (j+KOFF)*z(67,j)) + @SUM(valset(j): (j+KOFF)*z(68,j)) + @SUM(valset(j): (j+KOFF)*z(69,j)) + @SUM(valset(j): (j+KOFF)*z(70,j)) = KSUM;
[HRZ9] @SUM(valset(j): (j+KOFF)*z(71,j)) + @SUM(valset(j): (j+KOFF)*z(72,j)) + @SUM(valset(j): (j+KOFF)*z(73,j)) + @SUM(valset(j): (j+KOFF)*z(74,j)) + @SUM(valset(j): (j+KOFF)*z(75,j)) + @SUM(valset(j): (j+KOFF)*z(76,j)) + @SUM(valset(j): (j+KOFF)*z(77,j)) + @SUM(valset(j): (j+KOFF)*z(78,j)) = KSUM;
[HRZ10] @SUM(valset(j): (j+KOFF)*z(79,j)) + @SUM(valset(j): (j+KOFF)*z(80,j)) + @SUM(valset(j): (j+KOFF)*z(81,j)) + @SUM(valset(j): (j+KOFF)*z(82,j)) + @SUM(valset(j): (j+KOFF)*z(83,j)) + @SUM(valset(j): (j+KOFF)*z(84,j)) + @SUM(valset(j): (j+KOFF)*z(85,j)) = KSUM;
[HRZ11] @SUM(valset(j): (j+KOFF)*z(86,j)) + @SUM(valset(j): (j+KOFF)*z(87,j)) + @SUM(valset(j): (j+KOFF)*z(88,j)) + @SUM(valset(j): (j+KOFF)*z(89,j)) + @SUM(valset(j): (j+KOFF)*z(90,j)) + @SUM(valset(j): (j+KOFF)*z(91,j)) = KSUM;
[LLR1] @SUM(valset(j): (j+KOFF)*z(41,j)) + @SUM(valset(j): (j+KOFF)*z(52,j)) + @SUM(valset(j): (j+KOFF)*z(62,j)) + @SUM(valset(j): (j+KOFF)*z(71,j)) + @SUM(valset(j): (j+KOFF)*z(79,j)) + @SUM(valset(j): (j+KOFF)*z(86,j)) = KSUM;
[LLR2] @SUM(valset(j): (j+KOFF)*z(31,j)) + @SUM(valset(j): (j+KOFF)*z(42,j)) + @SUM(valset(j): (j+KOFF)*z(53,j)) + @SUM(valset(j): (j+KOFF)*z(63,j)) + @SUM(valset(j): (j+KOFF)*z(72,j)) + @SUM(valset(j): (j+KOFF)*z(80,j)) + @SUM(valset(j): (j+KOFF)*z(87,j)) = KSUM;
[LLR3] @SUM(valset(j): (j+KOFF)*z(22,j)) + @SUM(valset(j): (j+KOFF)*z(32,j)) + @SUM(valset(j): (j+KOFF)*z(43,j)) + @SUM(valset(j): (j+KOFF)*z(54,j)) + @SUM(valset(j): (j+KOFF)*z(64,j)) + @SUM(valset(j): (j+KOFF)*z(73,j)) + @SUM(valset(j): (j+KOFF)*z(81,j)) + @SUM(valset(j): (j+KOFF)*z(88,j)) = KSUM;
[LLR4] @SUM(valset(j): (j+KOFF)*z(14,j)) + @SUM(valset(j): (j+KOFF)*z(23,j)) + @SUM(valset(j): (j+KOFF)*z(33,j)) + @SUM(valset(j): (j+KOFF)*z(44,j)) + @SUM(valset(j): (j+KOFF)*z(55,j)) + @SUM(valset(j): (j+KOFF)*z(65,j)) + @SUM(valset(j): (j+KOFF)*z(74,j)) + @SUM(valset(j): (j+KOFF)*z(82,j)) + @SUM(valset(j): (j+KOFF)*z(89,j)) = KSUM;
[LLR5] @SUM(valset(j): (j+KOFF)*z(7,j)) + @SUM(valset(j): (j+KOFF)*z(15,j)) + @SUM(valset(j): (j+KOFF)*z(24,j)) + @SUM(valset(j): (j+KOFF)*z(34,j)) + @SUM(valset(j): (j+KOFF)*z(45,j)) + @SUM(valset(j): (j+KOFF)*z(56,j)) + @SUM(valset(j): (j+KOFF)*z(66,j)) + @SUM(valset(j): (j+KOFF)*z(75,j)) + @SUM(valset(j): (j+KOFF)*z(83,j)) + @SUM(valset(j): (j+KOFF)*z(90,j)) = KSUM;
[LLR6] @SUM(valset(j): (j+KOFF)*z(1,j)) + @SUM(valset(j): (j+KOFF)*z(8,j)) + @SUM(valset(j): (j+KOFF)*z(16,j)) + @SUM(valset(j): (j+KOFF)*z(25,j)) + @SUM(valset(j): (j+KOFF)*z(35,j)) + @SUM(valset(j): (j+KOFF)*z(46,j)) + @SUM(valset(j): (j+KOFF)*z(57,j)) + @SUM(valset(j): (j+KOFF)*z(67,j)) + @SUM(valset(j): (j+KOFF)*z(76,j)) + @SUM(valset(j): (j+KOFF)*z(84,j)) + @SUM(valset(j): (j+KOFF)*z(91,j)) = KSUM;
[LLR7] @SUM(valset(j): (j+KOFF)*z(2,j)) + @SUM(valset(j): (j+KOFF)*z(9,j)) + @SUM(valset(j): (j+KOFF)*z(17,j)) + @SUM(valset(j): (j+KOFF)*z(26,j)) + @SUM(valset(j): (j+KOFF)*z(36,j)) + @SUM(valset(j): (j+KOFF)*z(47,j)) + @SUM(valset(j): (j+KOFF)*z(58,j)) + @SUM(valset(j): (j+KOFF)*z(68,j)) + @SUM(valset(j): (j+KOFF)*z(77,j)) + @SUM(valset(j): (j+KOFF)*z(85,j)) = KSUM;
[LLR8] @SUM(valset(j): (j+KOFF)*z(3,j)) + @SUM(valset(j): (j+KOFF)*z(10,j)) + @SUM(valset(j): (j+KOFF)*z(18,j)) + @SUM(valset(j): (j+KOFF)*z(27,j)) + @SUM(valset(j): (j+KOFF)*z(37,j)) + @SUM(valset(j): (j+KOFF)*z(48,j)) + @SUM(valset(j): (j+KOFF)*z(59,j)) + @SUM(valset(j): (j+KOFF)*z(69,j)) + @SUM(valset(j): (j+KOFF)*z(78,j)) = KSUM;
[LLR9] @SUM(valset(j): (j+KOFF)*z(4,j)) + @SUM(valset(j): (j+KOFF)*z(11,j)) + @SUM(valset(j): (j+KOFF)*z(19,j)) + @SUM(valset(j): (j+KOFF)*z(28,j)) + @SUM(valset(j): (j+KOFF)*z(38,j)) + @SUM(valset(j): (j+KOFF)*z(49,j)) + @SUM(valset(j): (j+KOFF)*z(60,j)) + @SUM(valset(j): (j+KOFF)*z(70,j)) = KSUM;
[LLR10] @SUM(valset(j): (j+KOFF)*z(5,j)) + @SUM(valset(j): (j+KOFF)*z(12,j)) + @SUM(valset(j): (j+KOFF)*z(20,j)) + @SUM(valset(j): (j+KOFF)*z(29,j)) + @SUM(valset(j): (j+KOFF)*z(39,j)) + @SUM(valset(j): (j+KOFF)*z(50,j)) + @SUM(valset(j): (j+KOFF)*z(61,j)) = KSUM;
[LLR11] @SUM(valset(j): (j+KOFF)*z(6,j)) + @SUM(valset(j): (j+KOFF)*z(13,j)) + @SUM(valset(j): (j+KOFF)*z(21,j)) + @SUM(valset(j): (j+KOFF)*z(30,j)) + @SUM(valset(j): (j+KOFF)*z(40,j)) + @SUM(valset(j): (j+KOFF)*z(51,j)) = KSUM;
[ULR1] @SUM(valset(j): (j+KOFF)*z(1,j)) + @SUM(valset(j): (j+KOFF)*z(7,j)) + @SUM(valset(j): (j+KOFF)*z(14,j)) + @SUM(valset(j): (j+KOFF)*z(22,j)) + @SUM(valset(j): (j+KOFF)*z(31,j)) + @SUM(valset(j): (j+KOFF)*z(41,j)) = KSUM;
[ULR2] @SUM(valset(j): (j+KOFF)*z(2,j)) + @SUM(valset(j): (j+KOFF)*z(8,j)) + @SUM(valset(j): (j+KOFF)*z(15,j)) + @SUM(valset(j): (j+KOFF)*z(23,j)) + @SUM(valset(j): (j+KOFF)*z(32,j)) + @SUM(valset(j): (j+KOFF)*z(42,j)) + @SUM(valset(j): (j+KOFF)*z(52,j)) = KSUM;
[ULR3] @SUM(valset(j): (j+KOFF)*z(3,j)) + @SUM(valset(j): (j+KOFF)*z(9,j)) + @SUM(valset(j): (j+KOFF)*z(16,j)) + @SUM(valset(j): (j+KOFF)*z(24,j)) + @SUM(valset(j): (j+KOFF)*z(33,j)) + @SUM(valset(j): (j+KOFF)*z(43,j)) + @SUM(valset(j): (j+KOFF)*z(53,j)) + @SUM(valset(j): (j+KOFF)*z(62,j)) = KSUM;
[ULR4] @SUM(valset(j): (j+KOFF)*z(4,j)) + @SUM(valset(j): (j+KOFF)*z(10,j)) + @SUM(valset(j): (j+KOFF)*z(17,j)) + @SUM(valset(j): (j+KOFF)*z(25,j)) + @SUM(valset(j): (j+KOFF)*z(34,j)) + @SUM(valset(j): (j+KOFF)*z(44,j)) + @SUM(valset(j): (j+KOFF)*z(54,j)) + @SUM(valset(j): (j+KOFF)*z(63,j)) + @SUM(valset(j): (j+KOFF)*z(71,j)) = KSUM;
[ULR5] @SUM(valset(j): (j+KOFF)*z(5,j)) + @SUM(valset(j): (j+KOFF)*z(11,j)) + @SUM(valset(j): (j+KOFF)*z(18,j)) + @SUM(valset(j): (j+KOFF)*z(26,j)) + @SUM(valset(j): (j+KOFF)*z(35,j)) + @SUM(valset(j): (j+KOFF)*z(45,j)) + @SUM(valset(j): (j+KOFF)*z(55,j)) + @SUM(valset(j): (j+KOFF)*z(64,j)) + @SUM(valset(j): (j+KOFF)*z(72,j)) + @SUM(valset(j): (j+KOFF)*z(79,j)) = KSUM;
[ULR6] @SUM(valset(j): (j+KOFF)*z(6,j)) + @SUM(valset(j): (j+KOFF)*z(12,j)) + @SUM(valset(j): (j+KOFF)*z(19,j)) + @SUM(valset(j): (j+KOFF)*z(27,j)) + @SUM(valset(j): (j+KOFF)*z(36,j)) + @SUM(valset(j): (j+KOFF)*z(46,j)) + @SUM(valset(j): (j+KOFF)*z(56,j)) + @SUM(valset(j): (j+KOFF)*z(65,j)) + @SUM(valset(j): (j+KOFF)*z(73,j)) + @SUM(valset(j): (j+KOFF)*z(80,j)) + @SUM(valset(j): (j+KOFF)*z(86,j)) = KSUM;
[ULR7] @SUM(valset(j): (j+KOFF)*z(13,j)) + @SUM(valset(j): (j+KOFF)*z(20,j)) + @SUM(valset(j): (j+KOFF)*z(28,j)) + @SUM(valset(j): (j+KOFF)*z(37,j)) + @SUM(valset(j): (j+KOFF)*z(47,j)) + @SUM(valset(j): (j+KOFF)*z(57,j)) + @SUM(valset(j): (j+KOFF)*z(66,j)) + @SUM(valset(j): (j+KOFF)*z(74,j)) + @SUM(valset(j): (j+KOFF)*z(81,j)) + @SUM(valset(j): (j+KOFF)*z(87,j)) = KSUM;
[ULR8] @SUM(valset(j): (j+KOFF)*z(21,j)) + @SUM(valset(j): (j+KOFF)*z(29,j)) + @SUM(valset(j): (j+KOFF)*z(38,j)) + @SUM(valset(j): (j+KOFF)*z(48,j)) + @SUM(valset(j): (j+KOFF)*z(58,j)) + @SUM(valset(j): (j+KOFF)*z(67,j)) + @SUM(valset(j): (j+KOFF)*z(75,j)) + @SUM(valset(j): (j+KOFF)*z(82,j)) + @SUM(valset(j): (j+KOFF)*z(88,j)) = KSUM;
[ULR9] @SUM(valset(j): (j+KOFF)*z(30,j)) + @SUM(valset(j): (j+KOFF)*z(39,j)) + @SUM(valset(j): (j+KOFF)*z(49,j)) + @SUM(valset(j): (j+KOFF)*z(59,j)) + @SUM(valset(j): (j+KOFF)*z(68,j)) + @SUM(valset(j): (j+KOFF)*z(76,j)) + @SUM(valset(j): (j+KOFF)*z(83,j)) + @SUM(valset(j): (j+KOFF)*z(89,j)) = KSUM;
[ULR10] @SUM(valset(j): (j+KOFF)*z(40,j)) + @SUM(valset(j): (j+KOFF)*z(50,j)) + @SUM(valset(j): (j+KOFF)*z(60,j)) + @SUM(valset(j): (j+KOFF)*z(69,j)) + @SUM(valset(j): (j+KOFF)*z(77,j)) + @SUM(valset(j): (j+KOFF)*z(84,j)) + @SUM(valset(j): (j+KOFF)*z(90,j)) = KSUM;
[ULR11] @SUM(valset(j): (j+KOFF)*z(51,j)) + @SUM(valset(j): (j+KOFF)*z(61,j)) + @SUM(valset(j): (j+KOFF)*z(70,j)) + @SUM(valset(j): (j+KOFF)*z(78,j)) + @SUM(valset(j): (j+KOFF)*z(85,j)) + @SUM(valset(j): (j+KOFF)*z(91,j)) = KSUM;
END
!Hex grid:
! Honeycomb structure for order N=6;
!             1   2   3   4   5   6 
!           7   8   9  10  11  12  13 
!        14  15  16  17  18  19  20  21 
!      22  23  24  25  26  27  28  29  30 
!    31  32  33  34  35  36  37  38  39  40 
!  41  42  43  44  45  46  47  48  49  50  51 
!    52  53  54  55  56  57  58  59  60  61 
!      62  63  64  65  66  67  68  69  70 
!        71  72  73  74  75  76  77  78 
!          79  80  81  82  83  84  85 
!            86  87  88  89  90  91 
!;
! ||||||||||||||||||||;
!Rotated original hex grid 60 degrees:
! Honeycomb structure for order N=6;
!            41  31  22  14   7   1 
!          52  42  32  23  15   8   2 
!        62  53  43  33  24  16   9   3 
!      71  63  54  44  34  25  17  10   4 
!    79  72  64  55  45  35  26  18  11   5 
!  86  80  73  65  56  46  36  27  19  12   6 
!    87  81  74  66  57  47  37  28  20  13 
!      88  82  75  67  58  48  38  29  21 
!        89  83  76  68  59  49  39  30 
!          90  84  77  69  60  50  40 
!            91  85  78  70  61  51 
!;
! ////////////////////;
!Rotated original hex grid 120 degrees:
! Honeycomb structure for order N=6;
!            86  79  71  62  52  41 
!          87  80  72  63  53  42  31 
!        88  81  73  64  54  43  32  22 
!      89  82  74  65  55  44  33  23  14 
!    90  83  75  66  56  45  34  24  15   7 
!  91  84  76  67  57  46  35  25  16   8   1 
!    85  77  68  58  47  36  26  17   9   2 
!      78  69  59  48  37  27  18  10   3 
!        70  60  49  38  28  19  11   4 
!          61  50  39  29  20  12   5 
!            51  40  30  21  13   6 
!;
! --------------------;
!Rotated original hex grid 180 degrees:
! Honeycomb structure for order N=6;
!            91  90  89  88  87  86 
!          85  84  83  82  81  80  79 
!        78  77  76  75  74  73  72  71 
!      70  69  68  67  66  65  64  63  62 
!    61  60  59  58  57  56  55  54  53  52 
!  51  50  49  48  47  46  45  44  43  42  41 
!    40  39  38  37  36  35  34  33  32  31 
!      30  29  28  27  26  25  24  23  22 
!        21  20  19  18  17  16  15  14 
!          13  12  11  10   9   8   7 
!             6   5   4   3   2   1 
!;
! \\\\\\\\\\\\\\\\\\\\;
!Rotated original hex grid 240 degrees:
! Honeycomb structure for order N=6;
!            51  61  70  78  85  91 
!          40  50  60  69  77  84  90 
!        30  39  49  59  68  76  83  89 
!      21  29  38  48  58  67  75  82  88 
!    13  20  28  37  47  57  66  74  81  87 
!   6  12  19  27  36  46  56  65  73  80  86 
!     5  11  18  26  35  45  55  64  72  79 
!       4  10  17  25  34  44  54  63  71 
!         3   9  16  24  33  43  53  62 
!           2   8  15  23  32  42  52 
!             1   7  14  22  31  41 
!;
! ||||||||||||||||||||;
!Rotated original hex grid 300 degrees:
! Honeycomb structure for order N=6;
!             6  13  21  30  40  51 
!           5  12  20  29  39  50  61 
!         4  11  19  28  38  49  60  70 
!       3  10  18  27  37  48  59  69  78 
!     2   9  17  26  36  47  58  68  77  85 
!   1   8  16  25  35  46  57  67  76  84  91 
!     7  15  24  34  45  56  66  75  83  90 
!      14  23  33  44  55  65  74  82  89 
!        22  32  43  54  64  73  81  88 
!          31  42  53  63  72  80  87 
!            41  52  62  71  79  86 
!;
! --------------------;
!Rotated original hex grid 360 degrees:
! Honeycomb structure for order N=6;
!             1   2   3   4   5   6 
!           7   8   9  10  11  12  13 
!        14  15  16  17  18  19  20  21 
!      22  23  24  25  26  27  28  29  30 
!    31  32  33  34  35  36  37  38  39  40 
!  41  42  43  44  45  46  47  48  49  50  51 
!    52  53  54  55  56  57  58  59  60  61 
!      62  63  64  65  66  67  68  69  70 
!        71  72  73  74  75  76  77  78 
!          79  80  81  82  83  84  85 
!            86  87  88  89  90  91 
!;
!Flipped across horizontal axis:
! Honeycomb structure for order N=6;
!            86  87  88  89  90  91 
!          79  80  81  82  83  84  85 
!        71  72  73  74  75  76  77  78 
!      62  63  64  65  66  67  68  69  70 
!    52  53  54  55  56  57  58  59  60  61 
!  41  42  43  44  45  46  47  48  49  50  51 
!    31  32  33  34  35  36  37  38  39  40 
!      22  23  24  25  26  27  28  29  30 
!        14  15  16  17  18  19  20  21 
!           7   8   9  10  11  12  13 
!             1   2   3   4   5   6 
!;
!Flipped across LLR diagonal:
! Honeycomb structure for order N=6;
!            91  85  78  70  61  51 
!          90  84  77  69  60  50  40 
!        89  83  76  68  59  49  39  30 
!      88  82  75  67  58  48  38  29  21 
!    87  81  74  66  57  47  37  28  20  13 
!  86  80  73  65  56  46  36  27  19  12   6 
!    79  72  64  55  45  35  26  18  11   5 
!      71  63  54  44  34  25  17  10   4 
!        62  53  43  33  24  16   9   3 
!          52  42  32  23  15   8   2 
!            41  31  22  14   7   1 
!;
!Flipped accros ULR diagonal:
! Honeycomb structure for order N=6;
!            51  40  30  21  13   6 
!          61  50  39  29  20  12   5 
!        70  60  49  38  28  19  11   4 
!      78  69  59  48  37  27  18  10   3 
!    85  77  68  58  47  36  26  17   9   2 
!  91  84  76  67  57  46  35  25  16   8   1 
!    90  83  75  66  56  45  34  24  15   7 
!      89  82  74  65  55  44  33  23  14 
!        88  81  73  64  54  43  32  22 
!          87  80  72  63  53  42  31 
!            86  79  71  62  52  41 
!;
!Symmetry breaking constraints:
! - Break N deg rotational symmetry, N=60, 120, 180, 240, 300
! - Break horizontal symmetry
! - Break LLR diagonal symmetry
! - Break ULR diagonal symmetry
;
!	@FOR(cell(i):
!		@FOR(cell(j) | i,j share the same position in any symmetric hexagon:
!			valasg(i) <> valasg(j) for all symmetry groups..
!		);
